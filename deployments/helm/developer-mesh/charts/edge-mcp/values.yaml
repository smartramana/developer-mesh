# Default values for edge-mcp subchart
# These can be overridden by parent chart

nameOverride: ""
fullnameOverride: ""

# Replica count (overridden by HPA when enabled)
replicaCount: 3

# Image configuration
image:
  repository: developer-mesh/edge-mcp
  pullPolicy: IfNotPresent
  tag: ""  # Defaults to chart appVersion

imagePullSecrets: []

# Service configuration
service:
  type: ClusterIP
  port: 8082
  targetPort: 8082
  annotations: {}
  labels: {}

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# RBAC
rbac:
  create: true

# Application configuration
config:
  # Core settings
  port: 8082
  logLevel: "info"

  # Edge MCP ID (auto-generated from pod name if not set)
  edgeMcpId: ""

  # Authentication
  apiKey: ""  # Should be provided via secret

  # Core Platform connection (optional)
  corePlatform:
    enabled: false
    url: ""
    apiKey: ""

  # Cache configuration
  cache:
    # Redis for L2 distributed cache
    redis:
      enabled: true
      fallbackMode: true

    # L1 memory cache settings
    l1:
      maxItems: 10000
      ttl: "5m"

    # L2 Redis cache settings
    l2:
      ttl: "1h"

    # Compression settings
    compression:
      enabled: true
      threshold: 1024

  # Rate limiting
  rateLimit:
    globalRps: 1000
    globalBurst: 2000
    tenantRps: 100
    tenantBurst: 200
    toolRps: 50
    toolBurst: 100
    enableQuotas: true

# Secrets (use existing secret or create new)
secrets:
  create: true
  name: ""

  # Edge MCP API key
  apiKey:
    value: ""
    existingSecret: ""
    existingSecretKey: "edge-mcp-api-key"

  # Core platform API key (if enabled)
  corePlatformApiKey:
    value: ""
    existingSecret: ""
    existingSecretKey: "core-platform-api-key"

# Resource limits
resources:
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 1000m
    memory: 512Mi

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
        - type: Pods
          value: 1
          periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Max

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Health probes
livenessProbe:
  enabled: true
  httpGet:
    path: /health/live
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  httpGet:
    path: /health/ready
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  enabled: true
  httpGet:
    path: /health/startup
    port: http
  initialDelaySeconds: 0
  periodSeconds: 2
  timeoutSeconds: 3
  failureThreshold: 30
  successThreshold: 1

# Security context
# Using distroless nonroot user (UID 65532)
securityContext:
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  fsGroup: 65532
  readOnlyRootFilesystem: true

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8082"
  prometheus.io/path: "/metrics"

# Pod labels
podLabels:
  app: edge-mcp

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity rules
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - edge-mcp
          topologyKey: kubernetes.io/hostname

# Service Monitor for Prometheus Operator
serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  relabelings: []
  metricRelabelings: []

# Init containers
initContainers:
  # Wait for Redis (if enabled)
  waitForRedis:
    enabled: true
    image: busybox:1.36
    resources:
      requests:
        cpu: 10m
        memory: 32Mi
      limits:
        cpu: 50m
        memory: 64Mi

  # Wait for REST API (optional, if corePlatform enabled)
  waitForRestApi:
    enabled: false
    image: busybox:1.36
    resources:
      requests:
        cpu: 10m
        memory: 32Mi
      limits:
        cpu: 50m
        memory: 64Mi
