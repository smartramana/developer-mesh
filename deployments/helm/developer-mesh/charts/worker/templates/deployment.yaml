apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "worker.fullname" . }}
  namespace: {{ .Values.global.namespace.name }}
  labels:
    {{- include "worker.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      {{- include "worker.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "worker.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "worker.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
        seccompProfile:
          type: RuntimeDefault
      {{- if or .Values.initContainers.waitForDatabase.enabled .Values.initContainers.waitForRedis.enabled }}
      initContainers:
      {{- if .Values.initContainers.waitForDatabase.enabled }}
      - name: wait-for-database
        image: {{ .Values.initContainers.waitForDatabase.image }}
        command: ['sh', '-c']
        args:
          - |
            echo "Waiting for database at {{ include "developer-mesh.database.host" . }}:{{ include "developer-mesh.database.port" . }}..."
            until nc -z {{ include "developer-mesh.database.host" . }} {{ include "developer-mesh.database.port" . }}; do
              echo "Database is unavailable - sleeping"
              sleep 2
            done
            echo "Database is up!"
        resources:
          {{- toYaml .Values.initContainers.waitForDatabase.resources | nindent 10 }}
      {{- end }}
      {{- if .Values.initContainers.waitForRedis.enabled }}
      - name: wait-for-redis
        image: {{ .Values.initContainers.waitForRedis.image }}
        command: ['sh', '-c']
        args:
          - |
            echo "Waiting for Redis at {{ include "developer-mesh.redis.host" . }}:{{ include "developer-mesh.redis.port" . }}..."
            until nc -z {{ include "developer-mesh.redis.host" . }} {{ include "developer-mesh.redis.port" . }}; do
              echo "Redis is unavailable - sleeping"
              sleep 2
            done
            echo "Redis is up!"
        resources:
          {{- toYaml .Values.initContainers.waitForRedis.resources | nindent 10 }}
      {{- end }}
      {{- end }}
      containers:
      - name: worker
        image: {{ include "worker.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        # Core settings
        - name: ENVIRONMENT
          value: {{ .Values.global.environment | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.config.logLevel | quote }}
        - name: LOG_FORMAT
          value: {{ .Values.config.logFormat | quote }}

        # Database connection
        {{- include "developer-mesh.database.env" . | nindent 8 }}

        # Redis connection
        {{- include "developer-mesh.redis.env" . | nindent 8 }}

        # AWS configuration
        {{- include "developer-mesh.aws.env" . | nindent 8 }}

        # JWT secret
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "developer-mesh.jwt.secretName" . }}
              key: {{ .Values.global.security.jwt.existingSecretKeyName | default "jwt-secret" }}

        # Worker configuration
        - name: WORKER_CONCURRENCY
          value: {{ .Values.config.concurrency | quote }}
        - name: QUEUE_TYPE
          value: {{ .Values.config.queueType | quote }}

        # Embedding configuration
        - name: EMBEDDING_DEFAULT_MODEL
          value: {{ .Values.config.embedding.defaultModel | quote }}
        - name: EMBEDDING_CHUNK_SIZE
          value: {{ .Values.config.embedding.chunkSize | quote }}
        - name: EMBEDDING_BATCH_SIZE
          value: {{ .Values.config.embedding.batchSize | quote }}
        - name: BEDROCK_ENABLED
          value: {{ .Values.config.bedrock.enabled | quote }}
        - name: BEDROCK_REGION
          value: {{ .Values.global.aws.region | quote }}

        # Tracing
        {{- if .Values.global.tracing.enabled }}
        - name: TRACING_ENABLED
          value: "true"
        - name: OTLP_ENDPOINT
          value: {{ .Values.global.tracing.otlpEndpoint | quote }}
        {{- end }}

        resources:
          {{- toYaml .Values.resources | nindent 10 }}

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}

        volumeMounts:
        {{- include "developer-mesh.commonVolumeMounts" . | nindent 8 }}
        - name: configs
          mountPath: /app/configs
          readOnly: true

      volumes:
      {{- include "developer-mesh.commonVolumes" . | nindent 6 }}
      - name: configs
        emptyDir: {}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 30
