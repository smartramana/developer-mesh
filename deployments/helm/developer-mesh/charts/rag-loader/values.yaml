# Default values for rag-loader subchart
# These can be overridden by parent chart

nameOverride: ""
fullnameOverride: ""

# Replica count (overridden by HPA when enabled)
replicaCount: 2

# Image configuration
image:
  repository: developer-mesh/rag-loader
  pullPolicy: IfNotPresent
  tag: ""  # Defaults to chart appVersion

imagePullSecrets: []

# Service configuration
service:
  type: ClusterIP
  port: 8084
  targetPort: 8084
  metricsPort: 9094
  annotations: {}
  labels: {}

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# RBAC
rbac:
  create: true

# Application configuration
config:
  # Core settings
  apiPort: 8084
  metricsPort: 9094
  environment: "production"
  logLevel: "info"
  logFormat: "json"
  apiEnabled: true

  # Master key for multi-tenant encryption (REQUIRED - must be base64-encoded 32-byte value)
  masterKey: ""

  # Scheduler configuration
  scheduler:
    defaultSchedule: "*/30 * * * *"  # Every 30 minutes
    enableApi: true
    enableEvents: false

  # Embedding configuration
  embedding:
    defaultModel: "amazon.titan-embed-text-v2:0"

  # Prometheus metrics
  prometheus:
    enabled: true

# Secrets (use existing secret or create new)
secrets:
  create: true
  name: ""

  # RAG Master Key (base64-encoded 32-byte value)
  # Generate with: openssl rand -base64 32
  masterKey:
    value: ""
    existingSecret: ""
    existingSecretKey: "rag-master-key"

# Resource limits
resources:
  requests:
    cpu: 200m
    memory: 512Mi
  limits:
    cpu: 2000m
    memory: 2Gi

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 6
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
        - type: Pods
          value: 1
          periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Max

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Health probes
livenessProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 0
  periodSeconds: 2
  timeoutSeconds: 3
  failureThreshold: 60
  successThreshold: 1

# Security context
# RAG Loader uses UID 1000 (different from default 65532)
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  readOnlyRootFilesystem: true

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9094"
  prometheus.io/path: "/metrics"

# Pod labels
podLabels:
  app: rag-loader

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity rules
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - rag-loader
          topologyKey: kubernetes.io/hostname

# Ingress configuration
ingress:
  enabled: false
  className: nginx
  annotations: {}
  hosts:
    - host: rag.developer-mesh.example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Service Monitor for Prometheus Operator
serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  relabelings: []
  metricRelabelings: []

# Init containers
initContainers:
  # Wait for database
  waitForDatabase:
    enabled: true
    image: busybox:1.36
    resources:
      requests:
        cpu: 10m
        memory: 32Mi
      limits:
        cpu: 50m
        memory: 64Mi

  # Wait for Redis
  waitForRedis:
    enabled: true
    image: busybox:1.36
    resources:
      requests:
        cpu: 10m
        memory: 32Mi
      limits:
        cpu: 50m
        memory: 64Mi
