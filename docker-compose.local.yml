version: '3.8'

services:
  edge-mcp:
    build:
      context: .
      dockerfile: apps/edge-mcp/Dockerfile
    ports:
      - "8085:8082"  # Edge MCP runs on 8082 internally, map to 8085 externally
    environment:
      # Edge MCP configuration
      - EDGE_MCP_API_KEY=adm_FoOnztJiTtcoq1BUJSNpxL7rjZheDY5xLFn83VhnKaQ
      - DEV_MESH_URL=http://rest-api:8080
      - DEV_MESH_API_KEY=adm_FoOnztJiTtcoq1BUJSNpxL7rjZheDY5xLFn83VhnKaQ
      - EDGE_MCP_ID=edge-docker-001
      - LOG_LEVEL=${LOG_LEVEL:-info}
      # Database (if Edge MCP needs direct access)
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_NAME=devmesh_development
      - DATABASE_USER=devmesh
      - DATABASE_PASSWORD=devmesh
      - DATABASE_SSL_MODE=disable
      # Redis (for caching)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./apps/edge-mcp/configs:/app/configs:ro
    depends_on:
      rest-api:
        condition: service_healthy
      database:
        condition: service_healthy
      redis:
        condition: service_healthy

    # Health check is defined in Dockerfile using the binary's -health-check flag
    # No need to override it here
    networks:
      - mcp-network
      
  rest-api:
    build:
      context: .
      dockerfile: ./apps/rest-api/Dockerfile
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "/app/rest-api", "--health-check"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 30s
    environment:
      # Core settings
      - ENVIRONMENT=docker
      - MCP_CONFIG_FILE=/app/configs/config.docker.yaml
      - USE_MOCK_CONTEXT_MANAGER=false
      - API_HOST=0.0.0.0
      - API_PORT=8080
      - PORT=8080
      - MCP_SERVER_URL=http://edge-mcp:8082
      # Authentication
      - JWT_SECRET=${JWT_SECRET:-docker-jwt-secret-change-in-production}
      - ADMIN_API_KEY=${ADMIN_API_KEY:-dev-admin-key-1234567890}
      - READER_API_KEY=${READER_API_KEY:-dev-readonly-key-1234567890}
      - MCP_API_KEY=${MCP_API_KEY:-dev-admin-key-1234567890}
      # Database (using service names)
      - DATABASE_HOST=database
      - DB_HOST=database
      - DATABASE_PORT=5432
      - DB_PORT=5432
      - DATABASE_NAME=devmesh_development
      - DB_NAME=devmesh_development
      - DATABASE_USER=devmesh
      - DB_USER=devmesh
      - DATABASE_PASSWORD=devmesh
      - DB_PASSWORD=devmesh
      - DATABASE_SSL_MODE=disable
      - DB_SSLMODE=disable
      - DATABASE_DSN=postgres://devmesh:devmesh@database:5432/devmesh_development?sslmode=disable&search_path=mcp,public
      - MIGRATIONS_FAIL_FAST=true
      # Redis (using service names)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_ADDR=redis:6379
      - REDIS_ADDRESS=redis:6379
      - CACHE_TYPE=redis
      # ElastiCache configuration for functional tests
      - ELASTICACHE_ENDPOINT=redis
      - ELASTICACHE_PORT=6379
      # AWS Configuration
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # - AWS_ENDPOINT_URL=http://localstack:4566  # Commented out to use real AWS
      - S3_BUCKET=${S3_BUCKET:-mcp-contexts}
      - S3_ENDPOINT=http://localstack:4566
      - S3_USE_PATH_STYLE=true
      # GitHub Integration
      - GITHUB_TOKEN=${GITHUB_TOKEN:-test-github-token}
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET:-docker-github-webhook-secret}
      - GITHUB_OWNER=${GITHUB_OWNER:-test-org}
      - GITHUB_REPO=${GITHUB_REPO:-test-repo}
      # Mock Server
      - MOCKSERVER_URL=http://mockserver:8081
      - MOCK_RESPONSES_ENABLED=${MOCK_RESPONSES_ENABLED:-true}
      # Embedding Configuration
      - EMBEDDING_ENABLED=${EMBEDDING_ENABLED:-true}
      # OpenAI Provider
      - OPENAI_ENABLED=${OPENAI_ENABLED:-false}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # AWS Bedrock Provider
      - BEDROCK_ENABLED=true
      - BEDROCK_REGION=${AWS_REGION:-us-east-1}
      - BEDROCK_ENDPOINT=${BEDROCK_ENDPOINT:-}
      - BEDROCK_ROLE_ARN=${BEDROCK_ROLE_ARN:-}
      # Google AI Provider
      - GOOGLE_AI_ENABLED=${GOOGLE_AI_ENABLED:-false}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY:-}
      # Legacy Vector Search (for compatibility)
      - VECTOR_ENABLED=${VECTOR_ENABLED:-true}
      - VECTOR_DEFAULT_MODEL=${VECTOR_DEFAULT_MODEL:-text-embedding-ada-002}
      - VECTOR_DEFAULT_DIMENSION=${VECTOR_DEFAULT_DIMENSION:-1536}
      # Monitoring
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - LOG_FORMAT=json
      - PROMETHEUS_ENABLED=true
      # Security
      - CORS_ENABLED=true
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
      - RATE_LIMIT_ENABLED=true
      - ENCRYPTION_MASTER_KEY=${ENCRYPTION_MASTER_KEY:-dev_master_key_32_chars_long123}
      # URL Validation Settings (for local development)
      - ALLOW_LOCALHOST_URLS=true
      - ALLOW_PRIVATE_NETWORK_URLS=true
      # Legacy keys for backward compatibility (deprecated - will be removed)
      - DEVMESH_ENCRYPTION_KEY=${ENCRYPTION_MASTER_KEY:-dev_master_key_32_chars_long123}
      # Feature Flags
      - FEATURE_WEBHOOKS_ENABLED=true
      - FEATURE_VECTOR_SEARCH_ENABLED=true
      - FEATURE_GITHUB_INTEGRATION_ENABLED=true
    volumes:
      - ./configs:/app/configs:ro
      - ./apps/rest-api/configs:/app/api-configs:ro
      - ./apps/rest-api/migrations:/app/migrations:ro
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Health check is defined in Dockerfile using the binary's -health-check flag
    # No need to override it here
    networks:
      - mcp-network
      
  worker:
    build:
      context: .
      dockerfile: apps/worker/Dockerfile
    environment:
      # Core settings
      - ENVIRONMENT=docker
      - APP_ENV=development
      - MCP_CONFIG_FILE=configs/config.docker.yaml
      # Database (using service names)
      - DATABASE_HOST=database
      - DB_HOST=database
      - DATABASE_PORT=5432
      - DB_PORT=5432
      - DATABASE_NAME=devmesh_development
      - DB_NAME=devmesh_development
      - DATABASE_USER=devmesh
      - DB_USER=devmesh
      - DATABASE_PASSWORD=devmesh
      - DB_PASSWORD=devmesh
      - DATABASE_DSN=postgresql://devmesh:devmesh@database:5432/devmesh_development?sslmode=disable&search_path=mcp,public
      - DATABASE_SEARCH_PATH=mcp,public
      # Redis (using service names)
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_ADDR=redis:6379
      - REDIS_ADDRESS=redis:6379
      # AWS Configuration
      # Use real AWS for Bedrock and other services, LocalStack only for S3
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # S3 Configuration - Use LocalStack for local development
      - S3_ENDPOINT=http://localstack:4566
      - S3_USE_PATH_STYLE=true
      # Note: AWS_ENDPOINT_URL is NOT set globally, so Bedrock uses real AWS
      # Only S3 operations use LocalStack via S3_ENDPOINT
      # Worker configuration
      - WORKER_QUEUE_TYPE=redis  # Use Redis Streams for local development
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-5}
      # Optional: Enable mock mode if LocalStack isn't available
      # - WORKER_MOCK_MODE=true
      # Embedding Configuration (Context Processing)
      # AWS Bedrock Provider - Primary embedding service for context items
      - MCP_EMBEDDING_PROVIDERS_BEDROCK_ENABLED=true
      - MCP_EMBEDDING_PROVIDERS_BEDROCK_REGION=us-east-1
      - MCP_EMBEDDING_PROVIDERS_BEDROCK_ENDPOINT=
      # OpenAI Provider (optional - requires API key)
      - MCP_EMBEDDING_PROVIDERS_OPENAI_ENABLED=${OPENAI_ENABLED:-false}
      - MCP_EMBEDDING_PROVIDERS_OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # Google AI Provider (optional - requires API key)
      - MCP_EMBEDDING_PROVIDERS_GOOGLE_ENABLED=${GOOGLE_AI_ENABLED:-false}
      - MCP_EMBEDDING_PROVIDERS_GOOGLE_API_KEY=${GOOGLE_AI_API_KEY:-}
      # Embedding Processing Options
      - DEFAULT_EMBEDDING_MODEL=${DEFAULT_EMBEDDING_MODEL:-amazon.titan-embed-text-v2:0}
      - CONTEXT_CHUNK_SIZE=${CONTEXT_CHUNK_SIZE:-1000}
      - EMBEDDING_BATCH_SIZE=${EMBEDDING_BATCH_SIZE:-10}
      # Artifactory Configuration (optional - for Phase 2 webhook processing)
      - ARTIFACTORY_URL=${ARTIFACTORY_URL:-https://artifactory.example.com}
      - ARTIFACTORY_API_KEY=${ARTIFACTORY_API_KEY:-test-artifactory-key}
    depends_on:
      rest-api:
        condition: service_healthy
      redis:
        condition: service_healthy
      database:
        condition: service_healthy
      localstack:
        condition: service_healthy
      localstack-init:
        condition: service_completed_successfully
    volumes:
      - ./apps/worker/configs:/app/configs
    networks:
      - mcp-network

  rag-loader:
    build:
      context: .
      dockerfile: apps/rag-loader/Dockerfile
    ports:
      - "8084:8084"    # API port
      - "9094:9094"    # Health/metrics port
    environment:
      # Core settings
      - ENVIRONMENT=docker
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      # Multi-tenant API configuration
      - RAG_API_ENABLED=true
      - RAG_API_PORT=8084
      - RAG_LOADER_METRICS_PORT=9094
      # Database (using service names)
      - DATABASE_HOST=database
      - DATABASE_PORT=5432
      - DATABASE_NAME=devmesh_development
      - DATABASE_USER=devmesh
      - DATABASE_PASSWORD=devmesh
      - DATABASE_SSL_MODE=disable
      - DATABASE_SEARCH_PATH=rag,mcp,public
      # Redis (using service names)
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
      # Security - Multi-tenant encryption and authentication
      - RAG_MASTER_KEY=${RAG_MASTER_KEY}
      - JWT_SECRET=${JWT_SECRET:-docker-jwt-secret-change-in-production}
      # GitHub Configuration - REMOVED: Now per-tenant via API
      # - GITHUB_ACCESS_TOKEN=${GITHUB_ACCESS_TOKEN}  # Configure per tenant through API
      # Scheduler configuration
      - DEFAULT_SCHEDULE="*/30 * * * *"  # Every 30 minutes
      - SCHEDULER_ENABLE_API=true
      - SCHEDULER_ENABLE_EVENTS=false  # Phase 1 - events disabled
      # AWS Configuration (for embeddings)
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      # Embedding Configuration
      - MCP_EMBEDDING_PROVIDERS_BEDROCK_ENABLED=true
      - MCP_EMBEDDING_PROVIDERS_BEDROCK_REGION=us-east-1
      - DEFAULT_EMBEDDING_MODEL=${DEFAULT_EMBEDDING_MODEL:-amazon.titan-embed-text-v2:0}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Mount config for multi-tenant API mode (sources: [])
      - ./apps/rag-loader/configs:/app/configs:ro
      - ./apps/rag-loader/migrations:/app/migrations:ro
    networks:
      - mcp-network

  mockserver:
    build:
      context: .
      dockerfile: apps/mockserver/Dockerfile
    ports:
      - "8082:8081"
    environment:
      - PORT=8081
    healthcheck:
      test: ["CMD", "/app/mockserver", "-health-check"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - mcp-network
  
  database:
    image: pgvector/pgvector:pg17
    environment:
      - POSTGRES_USER=devmesh
      - POSTGRES_PASSWORD=devmesh
      - POSTGRES_DB=devmesh_development
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # Database initialization script for direct schema setup
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devmesh -d devmesh_development"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network

  redis:
    image: redis:8.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--requirepass", "", "--protected-mode", "no", "--save", "", "--stop-writes-on-bgsave-error", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network

  localstack:
    image: localstack/localstack:3.4
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - mcp-network
      
  # LocalStack initialization service to create required resources
  localstack-init:
    image: amazon/aws-cli:latest
    depends_on:
      localstack:
        condition: service_healthy
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
        echo 'Creating S3 bucket...' &&
        aws --endpoint-url=http://localstack:4566 s3 mb s3://mcp-contexts || echo 'Bucket already exists' &&
        echo 'Setting S3 bucket policy...' &&
        aws --endpoint-url=http://localstack:4566 s3api put-bucket-policy --bucket mcp-contexts --policy '{
          \"Version\": \"2012-10-17\",
          \"Statement\": [{
            \"Effect\": \"Allow\",
            \"Principal\": \"*\",
            \"Action\": \"s3:*\",
            \"Resource\": [
              \"arn:aws:s3:::mcp-contexts\",
              \"arn:aws:s3:::mcp-contexts/*\"
            ]
          }]
        }' &&
        echo 'S3 bucket created successfully'
      "
    networks:
      - mcp-network

volumes:
  postgres-data:
  redis-data:

networks:
  mcp-network:
    driver: bridge
