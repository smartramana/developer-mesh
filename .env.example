# Developer Mesh Environment Configuration
# Copy this file to .env and update with your values

# Application Environment
ENVIRONMENT=development  # Options: development, staging, production

# Registry Configuration
GITHUB_USERNAME=your-github-username
VERSION=latest  # Or specific version like v1.2.3

# Service Ports
MCP_SERVER_PORT=8080
REST_API_PORT=8081
PROMETHEUS_PORT=9090
GRAFANA_PORT=3000

# Database Configuration
DATABASE_USER=mcp
DATABASE_PASSWORD=change-this-password
DATABASE_NAME=devops_mcp
DATABASE_SSL_MODE=disable  # Use 'require' in production

# Redis Configuration
REDIS_ADDR=redis:6379

# Security
JWT_SECRET=change-this-jwt-secret
ADMIN_API_KEY=change-this-admin-key

# AWS Configuration (Optional)
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
S3_BUCKET=mcp-storage
S3_ENDPOINT=  # Leave empty for AWS, set for LocalStack
SQS_QUEUE_URL=

# GitHub Integration
GITHUB_TOKEN=
GITHUB_APP_ID=
GITHUB_APP_PRIVATE_KEY=
GITHUB_WEBHOOK_SECRET=

# Monitoring
GRAFANA_USER=admin
GRAFANA_PASSWORD=change-this-password

# Feature Flags
ENABLE_VECTOR_SEARCH=true
ENABLE_GITHUB_INTEGRATION=true
ENABLE_WEBHOOK_PROCESSING=true

# ==============================================================================
# TLS CONFIGURATION
# ==============================================================================
# For development, run: ./scripts/certs/generate-dev-certs.sh
# For production in Kubernetes, use cert-manager.io

# Global TLS Settings
TLS_MIN_VERSION=1.3  # Minimum TLS version (1.2 or 1.3)

# API Server TLS (for HTTPS)
API_TLS_ENABLED=false  # Enable HTTPS for API server
TLS_CERT_FILE=  # Path to server certificate
TLS_KEY_FILE=   # Path to server private key
TLS_CLIENT_CA_FILE=  # Path to client CA for mutual TLS (optional)

# Database TLS
DATABASE_TLS_ENABLED=false  # Enable TLS for database connections
DATABASE_SSL_MODE=disable   # disable, require, verify-ca, verify-full
DATABASE_TLS_CERT=  # Path to client certificate
DATABASE_TLS_KEY=   # Path to client private key
DATABASE_TLS_CA=    # Path to CA certificate

# Redis/ElastiCache TLS
REDIS_TLS_CERT=  # Path to Redis client certificate (optional)
REDIS_TLS_KEY=   # Path to Redis client private key (optional)
REDIS_CA_CERT=   # Path to Redis CA certificate (optional)

# RDS TLS
RDS_CA_CERT=  # Path to RDS CA certificate

# ==============================================================================
# EMBEDDING CONFIGURATION
# ==============================================================================

# OpenAI Provider
OPENAI_ENABLED=false
OPENAI_API_KEY=sk-...  # Get from https://platform.openai.com/api-keys

# AWS Bedrock Provider
BEDROCK_ENABLED=false
# BEDROCK_ENDPOINT=  # Optional: Custom endpoint (e.g., for VPC endpoints)
# BEDROCK_ROLE_ARN=  # Optional: IAM role to assume

# Google AI Provider
GOOGLE_AI_ENABLED=false
GOOGLE_AI_API_KEY=  # Get from https://makersuite.google.com/app/apikey

# Embedding System Settings
EMBEDDING_ENABLED=true
GLOBAL_COST_LIMIT=100.0  # Daily cost limit in USD
COST_ALERT_THRESHOLD=50.0  # Alert threshold in USD

# ==============================================================================
# RAG (Retrieval Augmented Generation) CONFIGURATION
# ==============================================================================

# RAG Master Key (REQUIRED for rag-loader service)
# This key is used for encrypting RAG data and must be a base64-encoded 32-byte value
# Generate with: openssl rand -base64 32
RAG_MASTER_KEY=