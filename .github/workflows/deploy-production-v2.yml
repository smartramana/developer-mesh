name: Deploy to Production

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_migrations:
        description: 'Skip database migrations'
        required: false
        default: 'false'
        type: boolean

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
  DEPLOYMENT_TIMEOUT: 600  # 10 minutes

jobs:
  pre-deployment:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Check CI Status
        run: |
          echo "Checking CI status for commit ${{ github.sha }}"
          # Note: CI check is handled by branch protection rules

      - name: Verify Docker Images Exist
        run: |
          # Login to GHCR
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          # Docker metadata action creates shortened SHA tags (7 chars)
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          
          for service in edge-mcp rest-api worker; do
            # Try both latest and SHA-based tags
            IMAGE_BASE="ghcr.io/${OWNER}/developer-mesh-${service}"
            echo "Checking image: ${IMAGE_BASE}:latest"
            
            if docker pull "${IMAGE_BASE}:latest"; then
              echo "✓ Found ${IMAGE_BASE}:latest"
            else
              echo "Trying SHA-based tag: ${IMAGE_BASE}:main-${SHORT_SHA}"
              docker pull "${IMAGE_BASE}:main-${SHORT_SHA}" || {
                echo "ERROR: Could not find image for ${service}"
                exit 1
              }
            fi
          done

  deploy:
    name: Deploy Services
    needs: pre-deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 Instance ID
        id: get-instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=ip-address,Values=${{ env.EC2_INSTANCE_IP }}" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "Found instance: $INSTANCE_ID"

      - name: Create Deployment Package
        run: |
          mkdir -p deployment
          cp docker-compose.production.yml deployment/docker-compose.yml
          cp -r configs deployment/
          
          # Copy nginx configuration if it exists
          if [ -f deployments/nginx/mcp.conf ]; then
            mkdir -p deployment/nginx
            cp deployments/nginx/mcp.conf deployment/nginx/
          fi
          
          # Create .env file with all necessary variables
          cat > deployment/.env << EOF
          # Database
          DATABASE_HOST=${{ secrets.DATABASE_HOST }}
          DATABASE_PORT=5432
          DATABASE_USER=dbadmin
          DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME=devops_mcp
          DATABASE_SSL_MODE=require
          
          # Redis
          REDIS_ADDR=${{ secrets.REDIS_ENDPOINT }}
          REDIS_TLS_ENABLED=true
          USE_SSH_TUNNEL_FOR_REDIS=false
          REDIS_STREAM_NAME=webhooks
          REDIS_CONSUMER_GROUP=webhook-workers
          
          # AWS
          AWS_REGION=${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          S3_BUCKET=${{ secrets.S3_BUCKET }}
          
          # AWS Bedrock
          BEDROCK_ENABLED=true
          BEDROCK_SESSION_LIMIT=0.10
          GLOBAL_COST_LIMIT=10.0
          
          # Application
          ENVIRONMENT=production
          CONFIG_PATH=/app/configs/config.production.yaml
          MCP_CONFIG_FILE=/app/configs/config.production.yaml
          ADMIN_API_KEY=${{ secrets.ADMIN_API_KEY }}
          GITHUB_TOKEN=${{ github.token }}
          MCP_SERVER_URL=http://edge-mcp:8080
          # Remove global PORT - each service should use its own
          MCP_PORT=8080
          REST_API_PORT=8081
          API_LISTEN_ADDRESS=:8081
          
          # Logging
          LOG_LEVEL=info
          LOG_FORMAT=json
          
          # Worker Configuration
          WORKER_CONCURRENCY=10
          WORKER_POLL_INTERVAL=5s
          
          # Image Tags (use shortened SHA to match what Docker metadata creates)
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          IMAGE_TAG=main-${SHORT_SHA}
          
          # Export IMAGE_TAG so docker-compose can use it
          export IMAGE_TAG=main-${SHORT_SHA}
          EOF
          
          # Update docker-compose with new image tags (using shortened SHA)
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          sed -i "s|:latest|:main-${SHORT_SHA}|g" deployment/docker-compose.yml

      - name: Update Deployment Files on EC2
        run: |
          # Create a script that will update the deployment files
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ steps.get-instance.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              'cd /home/ec2-user/developer-mesh',
              'echo \"Fetching latest deployment configuration...\"',
              'echo \"Downloading docker-compose.production.yml...\"',
              'curl -sL https://raw.githubusercontent.com/developer-mesh/developer-mesh/main/docker-compose.production.yml -o docker-compose.production.yml',
              'if [ ! -f docker-compose.production.yml ] || [ ! -s docker-compose.production.yml ]; then',
              '  echo \"ERROR: Failed to download docker-compose.production.yml\"',
              '  exit 1',
              'fi',
              'echo \"Downloading config files...\"',
              'mkdir -p configs',
              'curl -sL https://raw.githubusercontent.com/developer-mesh/developer-mesh/main/configs/config.base.yaml -o configs/config.base.yaml',
              'curl -sL https://raw.githubusercontent.com/developer-mesh/developer-mesh/main/configs/config.production.yaml -o configs/config.production.yaml',
              'curl -sL https://raw.githubusercontent.com/developer-mesh/developer-mesh/main/configs/config.rest-api.yaml -o configs/config.rest-api.yaml',
              'curl -sL https://raw.githubusercontent.com/developer-mesh/developer-mesh/main/configs/auth.production.yaml -o configs/auth.production.yaml',
              'echo \"Verifying downloaded files...\"',
              'for file in docker-compose.production.yml configs/config.base.yaml configs/config.production.yaml configs/config.rest-api.yaml configs/auth.production.yaml; do',
              '  if [ ! -f \"\$file\" ] || [ ! -s \"\$file\" ]; then',
              '    echo \"ERROR: File \$file is missing or empty\"',
              '    exit 1',
              '  fi',
              '  echo \"✓ \$file (\$(wc -c < \"\$file\") bytes)\"',
              'done',
              'cp docker-compose.production.yml docker-compose.yml',
              'echo \"Docker compose file ready\"'
            ]" \
            --query "Command.CommandId" \
            --output text)
          
          aws ssm wait command-executed \
            --command-id "${COMMAND_ID}" \
            --instance-id "${{ steps.get-instance.outputs.instance_id }}"
          
          # Create .env file directly on EC2 with proper escaping
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ steps.get-instance.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cd /home/ec2-user/developer-mesh",
              "echo \"Creating .env file with production secrets...\"",
              "cat > .env << '\''EOF'\''",
              "DATABASE_HOST=${{ secrets.DATABASE_HOST }}",
              "DATABASE_PORT=5432",
              "DATABASE_USER=dbadmin",
              "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}",
              "DATABASE_NAME=devops_mcp",
              "DATABASE_SSL_MODE=require",
              "REDIS_ADDR=${{ secrets.REDIS_ENDPOINT }}",
              "REDIS_TLS_ENABLED=true",
              "USE_SSH_TUNNEL_FOR_REDIS=false",
              "REDIS_STREAM_NAME=webhooks",
              "REDIS_CONSUMER_GROUP=webhook-workers",
              "AWS_REGION=${{ env.AWS_REGION }}",
              "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}",
              "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}",
              "S3_BUCKET=${{ secrets.S3_BUCKET }}",
              "BEDROCK_ENABLED=true",
              "BEDROCK_SESSION_LIMIT=0.10",
              "GLOBAL_COST_LIMIT=10.0",
              "ENVIRONMENT=production",
              "CONFIG_PATH=/app/configs/config.production.yaml",
              "MCP_CONFIG_FILE=/app/configs/config.production.yaml",
              "ADMIN_API_KEY=${{ secrets.ADMIN_API_KEY }}",
              "E2E_API_KEY=${{ secrets.E2E_API_KEY }}",
              "MCP_API_KEY=${{ secrets.MCP_API_KEY }}",
              "GITHUB_TOKEN=${{ github.token }}",
              "GITHUB_WEBHOOK_SECRET=${{ secrets.MCP_WEBHOOK_SECRET }}",
              "MCP_WEBHOOK_ENABLED=true",
              "MCP_GITHUB_IP_VALIDATION=false",
              "MCP_SERVER_URL=http://edge-mcp:8080",
              "MCP_PORT=8080",
              "REST_API_PORT=8081",
              "API_LISTEN_ADDRESS=:8081",
              "LOG_LEVEL=info",
              "LOG_FORMAT=json",
              "WORKER_CONCURRENCY=10",
              "WORKER_POLL_INTERVAL=5s",
              "IMAGE_TAG=main-'"$SHORT_SHA"'",
              "EOF",
              "chmod 600 .env",
              "chown ec2-user:ec2-user .env",
              "echo \"Environment file created successfully\""
            ]' \
            --query "Command.CommandId" \
            --output text)
          
          aws ssm wait command-executed \
            --command-id "${COMMAND_ID}" \
            --instance-id "${{ steps.get-instance.outputs.instance_id }}"
          
      - name: Update Nginx Configuration
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ steps.get-instance.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "if [ -f /home/ec2-user/developer-mesh/nginx/mcp.conf ]; then",
              "  echo \"Updating nginx configuration...\"",
              "  sudo cp /etc/nginx/conf.d/mcp.conf /etc/nginx/conf.d/mcp.conf.backup.$(date +%Y%m%d_%H%M%S)",
              "  sudo cp /home/ec2-user/developer-mesh/nginx/mcp.conf /etc/nginx/conf.d/mcp.conf",
              "  if sudo nginx -t; then",
              "    sudo systemctl reload nginx",
              "    echo \"Nginx configuration updated successfully\"",
              "  else",
              "    echo \"Nginx configuration test failed, reverting...\"",
              "    sudo cp /etc/nginx/conf.d/mcp.conf.backup.$(ls -t /etc/nginx/conf.d/mcp.conf.backup.* | head -1 | xargs basename) /etc/nginx/conf.d/mcp.conf",
              "    exit 1",
              "  fi",
              "fi"
            ]' \
            --query "Command.CommandId" \
            --output text)
          
          aws ssm wait command-executed \
            --command-id "${COMMAND_ID}" \
            --instance-id "${{ steps.get-instance.outputs.instance_id }}"

      - name: Run Database Migrations
        if: ${{ github.event.inputs.skip_migrations != 'true' }}
        run: |
          echo "Checking if migrations directory exists on EC2..."
          
          # Use base64 encoding to avoid escaping issues
          MIGRATION_SCRIPT=$(cat << 'SCRIPT_END' | base64 -w 0
          #!/bin/bash
          cd /home/ec2-user/developer-mesh
          
          if [ ! -d migrations ]; then
            echo "No migrations directory found, pulling from git..."
            git checkout origin/main -- migrations/ || echo "Failed to checkout migrations"
          fi
          
          if [ -d migrations ] && [ "$(ls -A migrations/)" ]; then
            echo "Migrations directory found with files"
            if [ -f .env ]; then
              set -a
              source .env
              set +a
              echo "Running database migrations..."
              echo "Database host: ${DATABASE_HOST}"
              if [ -z "${DATABASE_PASSWORD}" ]; then
                echo "ERROR: DATABASE_PASSWORD is not set"
                exit 1
              fi
              docker pull migrate/migrate:latest
              docker run --rm \
                -v /home/ec2-user/developer-mesh/migrations:/migrations \
                --network host \
                migrate/migrate \
                -database "postgresql://dbadmin:${DATABASE_PASSWORD}@${DATABASE_HOST}:5432/devops_mcp?sslmode=require" \
                -path /migrations up || {
                  echo "Migration failed, but continuing deployment..."
                  echo "This might be because migrations are already applied"
                }
            else
              echo "ERROR: .env file not found"
              exit 1
            fi
          else
            echo "No migrations to run"
          fi
          SCRIPT_END
          )
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ steps.get-instance.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              \"echo '${MIGRATION_SCRIPT}' | base64 -d > /tmp/run-migrations.sh\",
              \"chmod +x /tmp/run-migrations.sh\",
              \"bash /tmp/run-migrations.sh\",
              \"rm -f /tmp/run-migrations.sh\"
            ]" \
            --query "Command.CommandId" \
            --output text)
          
          # Wait for completion
          aws ssm wait command-executed \
            --command-id "${COMMAND_ID}" \
            --instance-id "${{ steps.get-instance.outputs.instance_id }}" || {
            echo "Migration command had issues. Getting output..."
            aws ssm get-command-invocation \
              --command-id "${COMMAND_ID}" \
              --instance-id "${{ steps.get-instance.outputs.instance_id }}" \
              --query '[Status,StandardOutputContent,StandardErrorContent]' || true
            echo "Continuing despite migration issues..."
          }

      - name: Deploy Services (Simple)
        id: deploy
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "Deploying with image tag: main-${SHORT_SHA}"
          
          # Create simple deployment script
          DEPLOY_SCRIPT=$(cat << SCRIPT_END | base64 -w 0
          #!/bin/bash
          set -e
          cd /home/ec2-user/developer-mesh
          
          # Set image tag
          SHORT_SHA="${SHORT_SHA}"
          export IMAGE_TAG="main-\${SHORT_SHA}"
          echo "Using image tag: \${IMAGE_TAG}"
          
          # Also persist to .env for future restarts
          if ! grep -q "IMAGE_TAG=" .env; then
            echo "IMAGE_TAG=main-\${SHORT_SHA}" >> .env
          else
            sed -i "s/IMAGE_TAG=.*/IMAGE_TAG=main-\${SHORT_SHA}/" .env
          fi
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker-compose down || true
          
          # Pull new images
          echo "Pulling new images..."
          docker-compose pull
          
          # Start new containers
          echo "Starting new containers..."
          docker-compose up -d
          
          # Wait a bit for containers to start
          echo "Waiting for containers to start..."
          sleep 20
          
          # Check container status
          echo "Container status:"
          docker ps
          
          # Show logs if any container is unhealthy
          for container in edge-mcp rest-api worker; do
            if docker ps | grep -q "$container"; then
              echo "✓ $container is running"
            else
              echo "✗ $container is not running"
              docker logs $container --tail 50 || true
            fi
          done
          
          echo "Deployment complete"
          SCRIPT_END
          )
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ steps.get-instance.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              \"echo '${DEPLOY_SCRIPT}' | base64 -d > /tmp/deploy-services.sh\",
              \"chmod +x /tmp/deploy-services.sh\",
              \"bash /tmp/deploy-services.sh\",
              \"rm -f /tmp/deploy-services.sh\"
            ]" \
            --query "Command.CommandId" \
            --output text)
          
          # Wait for completion
          aws ssm wait command-executed \
            --command-id "${COMMAND_ID}" \
            --instance-id "${{ steps.get-instance.outputs.instance_id }}" || {
            echo "Deployment may have issues. Getting output..."
            aws ssm get-command-invocation \
              --command-id "${COMMAND_ID}" \
              --instance-id "${{ steps.get-instance.outputs.instance_id }}" || true
            # Don't fail here - let smoke test determine if deployment is actually broken
          }

      - name: Smoke Test
        run: |
          echo "Running smoke tests..."
          sleep 10  # Give services time to stabilize
          
          # Test REST API health endpoint
          echo "Testing REST API health endpoint..."
          for i in {1..5}; do
            if curl -f -s "https://api.dev-mesh.io/health"; then
              echo "✓ REST API is healthy"
              break
            fi
            echo "Attempt $i failed, retrying..."
            sleep 5
          done
          
          # Test MCP health endpoint
          echo "Testing MCP health endpoint..."
          for i in {1..5}; do
            if curl -f -s "https://mcp.dev-mesh.io/health"; then
              echo "✓ MCP Server is healthy"
              break
            fi
            echo "Attempt $i failed, retrying..."
            sleep 5
          done
          
          # Test WebSocket endpoint
          echo "Testing WebSocket endpoint..."
          ws_key=$(openssl rand -base64 16)
          ws_response=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Connection: Upgrade" \
            -H "Upgrade: websocket" \
            -H "Sec-WebSocket-Version: 13" \
            -H "Sec-WebSocket-Key: $ws_key" \
            "https://mcp.dev-mesh.io/ws")
          
          if [ "$ws_response" = "101" ] || [ "$ws_response" = "400" ] || [ "$ws_response" = "401" ]; then
            echo "WebSocket endpoint accessible (HTTP $ws_response)"
          else
            echo "Warning: WebSocket endpoint returned HTTP $ws_response"
          fi

      - name: Report Deployment Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "- MCP Server: https://mcp.dev-mesh.io"
            echo "- REST API: https://api.dev-mesh.io"
          else
            echo "❌ Deployment failed"
          fi

  rollback:
    name: Rollback on Failure
    needs: deploy
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 Instance ID
        id: get-instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=ip-address,Values=${{ env.EC2_INSTANCE_IP }}" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "Found instance: $INSTANCE_ID"

      - name: Perform Rollback
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ steps.get-instance.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cd /home/ec2-user/developer-mesh",
              "echo \"Starting rollback...\"",
              "docker-compose -p developer-mesh-blue down || true",
              "docker-compose restart",
              "docker-compose ps",
              "echo \"Rollback completed\""
            ]' \
            --query "Command.CommandId" \
            --output text)
          
          aws ssm wait command-executed \
            --command-id "${COMMAND_ID}" \
            --instance-id "${{ steps.get-instance.outputs.instance_id }}"