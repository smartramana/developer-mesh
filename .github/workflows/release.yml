name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'
      - '[0-9]+.[0-9]+.[0-9]+-*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.24.4'
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_PREFIX: ${{ github.repository_owner }}

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          # Validate semantic version format
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.\-]+)?$ ]]; then
            echo "Error: Version '$VERSION' does not follow semantic versioning (e.g., 1.0.0 or 1.0.0-beta.1)"
            exit 1
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Create comprehensive release notes
          cat > release-notes.md << 'EOF'
          ## 🚀 Developer Mesh ${{ steps.version.outputs.version }}

          ### 📦 Docker Images

          All images are available on GitHub Container Registry:

          ```bash
          # Edge MCP
          docker pull ghcr.io/${{ github.repository_owner }}/developer-mesh-edge-mcp:${{ steps.version.outputs.version }}

          # REST API
          docker pull ghcr.io/${{ github.repository_owner }}/developer-mesh-rest-api:${{ steps.version.outputs.version }}

          # Worker
          docker pull ghcr.io/${{ github.repository_owner }}/developer-mesh-worker:${{ steps.version.outputs.version }}

          # RAG Loader
          docker pull ghcr.io/${{ github.repository_owner }}/developer-mesh-rag-loader:${{ steps.version.outputs.version }}
          ```

          ### 🐳 Quick Start with Docker Compose

          ```bash
          # Clone the repository
          git clone https://github.com/${{ github.repository }}.git
          cd developer-mesh

          # Start all services
          docker-compose -f docker-compose.local.yml up -d
          ```

          ### ✨ Key Features

          - **Edge MCP**: WebSocket server for AI agent communication via Model Context Protocol with built-in tools
          - **REST API**: Dynamic tools integration and management
          - **Worker**: Redis-based webhook and event processing
          - **RAG Loader**: Semantic code indexing with pgvector embeddings
          - **Multi-tenant**: Complete tenant isolation and session management
          - **Security**: JWT authentication, encrypted credentials, rate limiting

          ### 🔧 Configuration

          Default endpoints:
          - Edge MCP WebSocket: `ws://localhost:8085/ws`
          - REST API: `http://localhost:8081`
          - Health checks: `/health` on each service

          ### 📚 Documentation

          - [Getting Started](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [API Documentation](https://github.com/${{ github.repository }}/blob/main/docs/API.md)
          - [MCP Protocol Guide](https://github.com/${{ github.repository }}/blob/main/docs/MCP.md)

          ### 🔄 What's Changed

          EOF

          # Improved changelog extraction with better pattern matching
          # Handles both "## [VERSION]" and "## [VERSION] - DATE" formats
          echo "Extracting changelog for version ${VERSION}..."

          # First, verify the version exists in CHANGELOG.md
          if ! grep -q "^## \[${VERSION}\]" CHANGELOG.md; then
            echo "⚠️  Warning: Version ${VERSION} not found in CHANGELOG.md"
            echo "Looking for pattern: ^## \[${VERSION}\]"
            echo ""
            echo "Available versions in CHANGELOG:"
            grep "^## \[" CHANGELOG.md | head -5
            echo ""
          fi

          # Extract changelog content with improved pattern
          # This handles "## [VERSION]" with anything after (date, text, etc.)
          CHANGELOG=$(awk -v ver="${VERSION}" '
            BEGIN { found = 0 }
            /^## \[/ {
              # Check if this line contains our version
              if (index($0, "[" ver "]") > 0) {
                found = 1
                next
              }
              # If we were capturing and hit a new version header, stop
              if (found) {
                exit
              }
            }
            found { print }
          ' CHANGELOG.md 2>/dev/null | sed 's/^[[:space:]]*//')

          if [ -n "$CHANGELOG" ] && [ "$CHANGELOG" != "" ]; then
            echo "✅ Successfully extracted changelog for version ${VERSION}"
            echo "$CHANGELOG" >> release-notes.md
          else
            echo "⚠️  No changelog found, generating from recent commits"
            echo "### Recent Changes" >> release-notes.md
            echo "" >> release-notes.md
            git log --pretty=format:"- %s (%h)" -20 >> release-notes.md || echo "- See commit history for details" >> release-notes.md
          fi

          echo "" >> release-notes.md
          echo "### 📝 Full Changelog" >> release-notes.md
          echo "https://github.com/${{ github.repository }}/compare/...${{ steps.version.outputs.version }}" >> release-notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: false

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: prepare-release
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        app: [edge-mcp, rest-api, worker, rag-loader]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_PREFIX }}/developer-mesh-${{ matrix.app }}
          tags: |
            type=raw,value=${{ needs.prepare-release.outputs.version }}
            type=raw,value=latest,enable=${{ !contains(needs.prepare-release.outputs.version, '-') }}
            type=semver,pattern={{version}},value=${{ needs.prepare-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.prepare-release.outputs.version }},enable=${{ !contains(needs.prepare-release.outputs.version, '-') }}
            type=semver,pattern={{major}},value=${{ needs.prepare-release.outputs.version }},enable=${{ !contains(needs.prepare-release.outputs.version, '-') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.prepare-release.outputs.version }}
            BUILD_TIME=${{ github.event.head_commit.timestamp || github.run_started_at }}
            COMMIT_SHA=${{ github.sha }}
          platforms: linux/amd64,linux/arm64

  update-changelog:
    name: Update Changelog
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-push]
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Check if version already exists in changelog
          if grep -q "## \[${VERSION}\]" CHANGELOG.md; then
            echo "Version ${VERSION} already exists in CHANGELOG.md"
            exit 0
          fi
          
          # Create a temporary file with the new entry
          {
            echo "## [${VERSION}] - ${DATE}"
            echo ""
            echo "### Added"
            echo "- New features and improvements"
            echo ""
            echo "### Changed"
            echo "- Updates and modifications"
            echo ""
            echo "### Fixed"
            echo "- Bug fixes and corrections"
            echo ""
            echo "### Security"
            echo "- Security updates if any"
            echo ""
          } > new_entry.md
          
          # Insert the new entry after the [Unreleased] section
          awk '/^## \[Unreleased\]/ {print; getline; print; print ""; while ((getline line < "new_entry.md") > 0) print line; close("new_entry.md")} {print}' CHANGELOG.md > CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md
          
          # Update the links section at the bottom
          REPO_URL="https://github.com/${{ github.repository }}"
          PREV_VERSION=$(grep -E "^\[.*\]: ${REPO_URL}" CHANGELOG.md | grep -v Unreleased | head -1 | sed 's/^\[\(.*\)\]:.*/\1/')
          
          # Add the new version link
          echo "[${VERSION}]: ${REPO_URL}/compare/${PREV_VERSION}...${VERSION}" >> CHANGELOG.md
          
          # Commit the changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG.md for ${VERSION} [skip ci]"
          git push origin HEAD:main