# Docker Environment Configuration
# This configuration is used when running services in Docker Compose
# It inherits from config.base.yaml and provides Docker-specific overrides

_base: config.base.yaml

# Environment
environment: "docker"

# MCP Server Configuration for Docker
mcp_server:
  listen_address: ":8080"  # MCP server port (WebSocket/MCP protocol)
  # Connection to REST API for data operations
  rest_api:
    enabled: true
    base_url: "http://rest-api:8080"  # Use Docker service name
    api_key: "${MCP_API_KEY:-dev-admin-key-1234567890}"
    timeout: 30s
    retry_count: 3

# API Server Configuration for Docker
api:
  listen_address: ":8080"  # Listen on all interfaces in container
  enable_swagger: true
  enable_pprof: true
  rate_limit:
    enabled: true
    limit: 100
    period: 1m
    burst_factor: 2
  
  # CORS - Allow host machine access
  cors:
    allowed_origins: 
      - "http://localhost:3000"
      - "http://localhost:8080"
      - "http://localhost:8081"
      - "*"  # For development only
    
  # Authentication - Relaxed for local development
  auth:
    require_auth: false  # Can be overridden by env var
    jwt_secret: "${JWT_SECRET}"  # From environment variable

# Authentication Configuration for Docker
auth:
  jwt:
    secret: "${JWT_SECRET}"  # From .env.docker
    expiration: 24h
    
  api_keys:
    static_keys:
      "${ADMIN_API_KEY}":
        role: "admin"
        scopes: ["read", "write", "admin"]
        tenant_id: "docker-tenant"
      "${READER_API_KEY}":
        role: "reader"  
        scopes: ["read"]
        tenant_id: "docker-tenant"
        
  # Minimal rate limiting for development
  rate_limiting:
    default:
      max_attempts: 1000
      window: 1m

# WebSocket Configuration for Docker
websocket:
  enabled: true  # Enable WebSocket in Docker environment
  max_connections: 5000  # Moderate limit for container environment
  
  # Buffer sizes for container environment
  read_buffer_size: 4096
  write_buffer_size: 4096
  
  # Connection settings
  ping_interval: 30s
  pong_timeout: 60s
  max_message_size: 1048576  # 1MB
  
  # Security - Development-friendly but secure
  security:
    require_auth: ${WS_REQUIRE_AUTH:-false}  # Can be toggled via env
    hmac_signatures: false
    allowed_origins: 
      - "http://localhost:*"
      - "http://host.docker.internal:*"
      - "ws://localhost:*"
      - "ws://host.docker.internal:*"
    max_frame_size: 1048576
    
  # Rate limiting - Moderate for containers
  rate_limit:
    rate: 16.67  # 1000 per minute
    burst: 100
    per_ip: true
    per_user: false  # Disabled for easier testing

# Database Configuration - Using Docker service names
database:
  host: "${DATABASE_HOST}"     # 'database' from docker-compose
  port: ${DATABASE_PORT}       # 5432
  username: "${DATABASE_USER}" # 'dev'
  password: "${DATABASE_PASSWORD}" # 'dev'
  database: "${DATABASE_NAME}" # 'dev'
  ssl_mode: "disable"
  
  # Auto-migrate for development
  migrations:
    auto_migrate: true
    migrations_path: "/app/migrations"

# Cache Configuration - Using Docker service names
cache:
  type: "redis"  # Standard Redis, not cluster mode
  address: "redis:6379"  # Direct service name
  password: ""
  database: 0
  max_retries: 3
  dial_timeout: 5s
  read_timeout: 3s
  write_timeout: 3s
  pool_size: 10
  min_idle_conns: 2
  pool_timeout: 3

# Storage Configuration for Docker
storage:
  context:
    provider: "s3"  # Use real AWS S3
    
  s3:
    # Leave endpoint empty to use real AWS S3
    region: "${AWS_REGION}"     # us-east-1
    bucket: "${S3_BUCKET}"      # sean-mcp-dev-contexts
    # Standard AWS S3 settings
    force_path_style: false
    disable_ssl: false

# Embedding Configuration for Docker
# Note: Values are overridden by MCP_EMBEDDING_PROVIDERS_* environment variables via viper AutomaticEnv()
embedding:
  providers:
    openai:
      enabled: false
      api_key: ""
    bedrock:
      enabled: true
      region: "us-east-1"
      endpoint: ""
    google:
      enabled: false
      api_key: ""

# Monitoring Configuration
monitoring:
  logging:
    level: "debug"
    format: "text"  # Human-readable for development
    output: "stdout"
    color: true
    
  metrics:
    enabled: true
    
  health:
    liveness_path: "/health"
    readiness_path: "/health"

# Adapter Configuration for Docker
adapters:
  github:
    token: "${GITHUB_TOKEN}"
    webhook_secret: "${GITHUB_WEBHOOK_SECRET}"
    
    # Use mock server if enabled
    mock:
      enabled: ${MOCK_RESPONSES_ENABLED:-true}
      url: "${MOCKSERVER_URL}"  # http://mockserver:8081
      
  # Real AWS services configuration
  aws:
    # Leave endpoint empty to use real AWS services
    region: "${AWS_REGION}"
    access_key_id: "${AWS_ACCESS_KEY_ID}"
    secret_access_key: "${AWS_SECRET_ACCESS_KEY}"

# Worker Configuration for Docker
worker:
  queue_type: "redis"  # Always use Redis
  concurrency: ${WORKER_CONCURRENCY:-5}
  
  redis:
    stream_name: "${REDIS_STREAM_NAME:-webhook-events}"
    consumer_group: "${REDIS_CONSUMER_GROUP:-webhook-processors}"
    
# Feature Flags for Docker
features:
  experimental_tools: true
  debug_mode: true
  mock_external_services: ${MOCK_RESPONSES_ENABLED:-true}