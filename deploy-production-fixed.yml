name: Deploy to Production (Fixed)

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_migrations:
        description: 'Skip database migrations'
        required: false
        default: 'false'
        type: boolean

env:
  AWS_REGION: us-east-1
  EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
  DEPLOYMENT_TIMEOUT: 600

jobs:
  pre-deployment:
    name: Pre-Deployment Checks
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Check CI Status
        run: |
          echo "Checking CI status for commit ${{ github.sha }}"
          # Note: CI check is handled by branch protection rules

      - name: Verify Docker Images Exist
        run: |
          # Login to GHCR
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          # Docker metadata action creates shortened SHA tags (7 chars)
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          
          for service in edge-mcp rest-api worker; do
            # Try both latest and SHA-based tags
            IMAGE_BASE="ghcr.io/${OWNER}/developer-mesh-${service}"
            echo "Checking image: ${IMAGE_BASE}:latest"
            
            if docker pull "${IMAGE_BASE}:latest"; then
              echo "✓ Found ${IMAGE_BASE}:latest"
            else
              echo "Trying SHA-based tag: ${IMAGE_BASE}:main-${SHORT_SHA}"
              docker pull "${IMAGE_BASE}:main-${SHORT_SHA}" || {
                echo "ERROR: Could not find image for ${service}"
                exit 1
              }
            fi
          done

  deploy:
    name: Deploy to EC2
    needs: pre-deployment
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://mcp.dev-mesh.io
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 Instance ID
        id: get-instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=developer-mesh-ec2" \
                     "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          
          if [ "$INSTANCE_ID" = "None" ] || [ -z "$INSTANCE_ID" ]; then
            echo "Error: Could not find running EC2 instance"
            exit 1
          fi
          
          echo "instance_id=${INSTANCE_ID}" >> $GITHUB_OUTPUT
          echo "Found EC2 instance: ${INSTANCE_ID}"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_NAT_INSTANCE_KEY }}" > ~/.ssh/ec2-nat-instance.pem
          chmod 600 ~/.ssh/ec2-nat-instance.pem
          ssh-keyscan -H ${{ secrets.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Deploy via SSM
        run: |
          echo "🚀 Starting deployment to EC2..."
          
          # Get short SHA for image tag
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          
          # Deploy using SSM
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ steps.get-instance.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              '#!/bin/bash',
              'set -e',
              '',
              '# Function to log with timestamp',
              'log() { echo \"[$(date +\"%Y-%m-%d %H:%M:%S\")] \$1\"; }',
              '',
              'log \"Starting deployment...\"',
              'cd /home/ec2-user',
              '',
              '# Clean up old deployment directory if needed',
              'if [ -d developer-mesh ]; then',
              '  log \"Cleaning up existing deployment directory...\"',
              '  cd developer-mesh',
              '  docker-compose down 2>/dev/null || true',
              '  cd ..',
              '  # Backup the deployment',
              '  rm -rf developer-mesh.backup',
              '  mv developer-mesh developer-mesh.backup',
              'fi',
              '',
              '# Create fresh deployment directory',
              'log \"Setting up deployment directory...\"',
              'mkdir -p developer-mesh',
              'cd developer-mesh',
              '',
              '# Create required directories',
              'mkdir -p configs logs nginx',
              '',
              '# Download docker-compose file',
              'log \"Downloading docker-compose.production.yml...\"',
              'curl -sL https://raw.githubusercontent.com/developer-mesh/developer-mesh/main/docker-compose.production.yml -o docker-compose.yml',
              'if [ ! -s docker-compose.yml ]; then',
              '  log \"ERROR: Failed to download docker-compose.yml\"',
              '  exit 1',
              'fi',
              '',
              '# Download all config files',
              'log \"Downloading configuration files...\"',
              'for config in config.base.yaml config.production.yaml config.rest-api.yaml auth.production.yaml; do',
              '  curl -sL https://raw.githubusercontent.com/developer-mesh/developer-mesh/main/configs/\$config -o configs/\$config',
              '  if [ ! -s configs/\$config ]; then',
              '    log \"ERROR: Failed to download \$config\"',
              '    exit 1',
              '  fi',
              '  log \"✓ Downloaded \$config\"',
              'done',
              '',
              '# Create config.yaml symlink',
              'log \"Creating config.yaml symlink...\"',
              'cd configs',
              'ln -sf config.production.yaml config.yaml',
              'cd ..',
              '',
              '# Restore .env from backup if exists',
              'if [ -f ../developer-mesh.backup/.env ]; then',
              '  cp ../developer-mesh.backup/.env .',
              'fi',
              '',
              '# Create .env file',
              'log \"Creating environment file...\"',
              'cat > .env << '\''ENVEOF'\''',
              '# Auto-generated deployment configuration',
              '# Generated at: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")',
              '# Commit: ${{ github.sha }}',
              '',
              '# Database',
              'DATABASE_HOST=${{ secrets.RDS_ENDPOINT }}',
              'DATABASE_PORT=5432',
              'DATABASE_USER=${{ secrets.DATABASE_USER }}',
              'DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}',
              'DATABASE_NAME=${{ secrets.DATABASE_NAME }}',
              'DATABASE_SSL_MODE=require',
              '',
              '# Redis',
              'REDIS_ADDR=${{ secrets.ELASTICACHE_ENDPOINT }}',
              'REDIS_TLS_ENABLED=true',
              'USE_SSH_TUNNEL_FOR_REDIS=false',
              'REDIS_STREAM_NAME=webhooks',
              'REDIS_CONSUMER_GROUP=webhook-workers',
              '',
              '# AWS',
              'AWS_REGION=${{ env.AWS_REGION }}',
              'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}',
              'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}',
              'S3_BUCKET=${{ secrets.S3_CONTEXT_BUCKET }}',
              '',
              '# Bedrock',
              'BEDROCK_ENABLED=true',
              'BEDROCK_SESSION_LIMIT=0.10',
              'GLOBAL_COST_LIMIT=10.0',
              '',
              '# Environment',
              'ENVIRONMENT=production',
              'CONFIG_PATH=/app/configs/config.production.yaml',
              'MCP_CONFIG_FILE=/app/configs/config.production.yaml',
              '',
              '# API Keys',
              'ADMIN_API_KEY=${{ secrets.ADMIN_API_KEY }}',
              'E2E_API_KEY=${{ secrets.E2E_API_KEY }}',
              'MCP_API_KEY=${{ secrets.MCP_API_KEY }}',
              'GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}',
              'GITHUB_WEBHOOK_SECRET=${{ secrets.GITHUB_WEBHOOK_SECRET }}',
              '',
              '# Services',
              'MCP_WEBHOOK_ENABLED=true',
              'MCP_GITHUB_IP_VALIDATION=false',
              'EDGE_MCP_URL=http://edge-mcp:8085',
              'MCP_PORT=8080',
              'REST_API_PORT=8081',
              'API_LISTEN_ADDRESS=:8081',
              '',
              '# Logging',
              'LOG_LEVEL=info',
              'LOG_FORMAT=json',
              '',
              '# Worker',
              'WORKER_CONCURRENCY=10',
              'WORKER_POLL_INTERVAL=5s',
              '',
              '# Docker image tag',
              'IMAGE_TAG=main-${SHORT_SHA}',
              'ENVEOF',
              '',
              'chmod 600 .env',
              'chown ec2-user:ec2-user .env',
              '',
              '# Login to GitHub Container Registry',
              'log \"Logging into GitHub Container Registry...\"',
              'echo \"${{ secrets.GITHUB_TOKEN }}\" | docker login ghcr.io -u ${{ github.actor }} --password-stdin',
              'if [ \$? -ne 0 ]; then',
              '  log \"ERROR: Docker login failed\"',
              '  exit 1',
              'fi',
              '',
              '# Set proper permissions',
              'chown -R ec2-user:ec2-user /home/ec2-user/developer-mesh',
              '',
              '# Stop existing containers',
              'log \"Stopping existing containers...\"',
              'docker-compose down || true',
              '',
              '# Pull new images',
              'log \"Pulling new images...\"',
              'docker-compose pull',
              'if [ \$? -ne 0 ]; then',
              '  log \"ERROR: Failed to pull images\"',
              '  exit 1',
              'fi',
              '',
              '# Start services',
              'log \"Starting services...\"',
              'docker-compose up -d',
              'if [ \$? -ne 0 ]; then',
              '  log \"ERROR: Failed to start services\"',
              '  exit 1',
              'fi',
              '',
              '# Wait for services to stabilize',
              'log \"Waiting for services to stabilize...\"',
              'sleep 10',
              '',
              '# Check status',
              'log \"Checking service status...\"',
              'docker-compose ps',
              '',
              '# Check logs for startup errors',
              'log \"Checking service health...\"',
              'for service in edge-mcp rest-api worker; do',
              '  if docker ps | grep -q \$service; then',
              '    log \"✓ \$service is running\"',
              '  else',
              '    log \"❌ \$service is not running\"',
              '    docker logs \$service --tail=20 2>&1 || true',
              '  fi',
              'done',
              '',
              'log \"Deployment complete!\"'
            ]" \
            --query "Command.CommandId" \
            --output text)
          
          echo "SSM Command ID: ${COMMAND_ID}"
          
          # Wait for command to complete
          aws ssm wait command-executed \
            --command-id "${COMMAND_ID}" \
            --instance-id "${{ steps.get-instance.outputs.instance_id }}" || true
          
          # Get command status and output
          STATUS=$(aws ssm get-command-invocation \
            --command-id "${COMMAND_ID}" \
            --instance-id "${{ steps.get-instance.outputs.instance_id }}" \
            --query "Status" \
            --output text)
          
          echo "Command Status: ${STATUS}"
          
          if [ "${STATUS}" != "Success" ]; then
            echo "❌ Deployment failed with status: ${STATUS}"
            echo "Getting error output..."
            aws ssm get-command-invocation \
              --command-id "${COMMAND_ID}" \
              --instance-id "${{ steps.get-instance.outputs.instance_id }}" \
              --query "StandardErrorContent" \
              --output text
            exit 1
          fi

      - name: Smoke Test
        run: |
          echo "🧪 Running smoke tests..."
          sleep 15  # Give services time to fully start
          
          # Track overall test status
          SMOKE_TEST_PASSED=true
          
          # Test REST API health endpoint
          echo "Testing REST API health endpoint..."
          API_HEALTHY=false
          for i in {1..5}; do
            if curl -f -s --connect-timeout 10 "https://api.dev-mesh.io/health"; then
              echo "✓ REST API is healthy"
              API_HEALTHY=true
              break
            fi
            echo "Attempt $i failed, retrying in 5s..."
            sleep 5
          done
          
          if [ "$API_HEALTHY" = "false" ]; then
            echo "❌ REST API health check failed after 5 attempts"
            SMOKE_TEST_PASSED=false
          fi
          
          # Test MCP health endpoint
          echo ""
          echo "Testing MCP health endpoint..."
          MCP_HEALTHY=false
          for i in {1..5}; do
            if curl -f -s --connect-timeout 10 "https://mcp.dev-mesh.io/health"; then
              echo "✓ MCP Server is healthy"
              MCP_HEALTHY=true
              break
            fi
            echo "Attempt $i failed, retrying in 5s..."
            sleep 5
          done
          
          if [ "$MCP_HEALTHY" = "false" ]; then
            echo "❌ MCP Server health check failed after 5 attempts"
            SMOKE_TEST_PASSED=false
          fi
          
          # Test WebSocket endpoint
          echo ""
          echo "Testing WebSocket endpoint..."
          ws_key=$(openssl rand -base64 16)
          ws_response=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 10 \
            -H "Connection: Upgrade" \
            -H "Upgrade: websocket" \
            -H "Sec-WebSocket-Version: 13" \
            -H "Sec-WebSocket-Key: $ws_key" \
            "https://mcp.dev-mesh.io/ws")
          
          if [ "$ws_response" = "101" ] || [ "$ws_response" = "400" ] || [ "$ws_response" = "401" ]; then
            echo "✓ WebSocket endpoint accessible (HTTP $ws_response)"
          else
            echo "❌ WebSocket endpoint returned HTTP $ws_response"
            SMOKE_TEST_PASSED=false
          fi
          
          # Check container status on failure
          if [ "$SMOKE_TEST_PASSED" = "false" ]; then
            echo ""
            echo "🔍 Getting diagnostics..."
            
            # Get container status via SSM
            DIAG_CMD=$(aws ssm send-command \
              --instance-ids "${{ steps.get-instance.outputs.instance_id }}" \
              --document-name "AWS-RunShellScript" \
              --parameters "commands=[
                'cd /home/ec2-user/developer-mesh',
                'echo \"=== Container Status ===\"',
                'docker-compose ps',
                'echo \"\"',
                'echo \"=== Recent Logs ===\"',
                'for service in edge-mcp rest-api worker; do',
                '  echo \"--- \$service logs ---\"',
                '  docker-compose logs --tail=20 \$service 2>&1 | grep -E \"ERROR|FATAL|Failed|error:\" || echo \"No errors found\"',
                'done'
              ]" \
              --query "Command.CommandId" \
              --output text)
            
            sleep 5
            
            aws ssm get-command-invocation \
              --command-id "${DIAG_CMD}" \
              --instance-id "${{ steps.get-instance.outputs.instance_id }}" \
              --query "StandardOutputContent" \
              --output text || true
          fi
          
          # Exit with failure if any smoke test failed
          if [ "$SMOKE_TEST_PASSED" = "false" ]; then
            echo ""
            echo "❌ SMOKE TESTS FAILED"
            exit 1
          else
            echo ""
            echo "✅ All smoke tests passed"
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "### 🔗 Endpoints" >> $GITHUB_STEP_SUMMARY
            echo "- [MCP Server](https://mcp.dev-mesh.io)" >> $GITHUB_STEP_SUMMARY
            echo "- [REST API](https://api.dev-mesh.io)" >> $GITHUB_STEP_SUMMARY
            echo "- [API Documentation](https://api.dev-mesh.io/docs)" >> $GITHUB_STEP_SUMMARY
          fi

  rollback:
    name: Rollback on Failure
    needs: deploy
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 Instance ID
        id: get-instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=developer-mesh-ec2" \
                     "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Perform Rollback
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ steps.get-instance.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "cd /home/ec2-user/developer-mesh",
              "echo \"Starting rollback...\"",
              "docker-compose down || true",
              "if [ -f ../developer-mesh.backup/.env ]; then",
              "  cp ../developer-mesh.backup/.env .",
              "  docker-compose up -d",
              "else",
              "  echo \"No backup found to restore\"",
              "fi",
              "docker-compose ps",
              "echo \"Rollback completed\""
            ]' \
            --query "Command.CommandId" \
            --output text)
          
          aws ssm wait command-executed \
            --command-id "${COMMAND_ID}" \
            --instance-id "${{ steps.get-instance.outputs.instance_id }}"