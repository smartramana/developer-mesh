paths:
  # Public Authentication Endpoints (no auth required)
  
  /auth/register/organization:
    post:
      tags:
        - Authentication
      summary: Register a new organization
      description: Register a new organization with an admin user
      operationId: registerOrganization
      security: []  # No authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationRegistration'
      responses:
        '201':
          description: Organization registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
        '400':
          $ref: '../common/responses.yaml#/components/responses/BadRequest'
        '409':
          description: Organization already exists
        '500':
          $ref: '../common/responses.yaml#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate a user and receive JWT tokens
      operationId: login
      security: []  # No authentication required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '../common/responses.yaml#/components/responses/Unauthorized'
        '429':
          $ref: '../common/responses.yaml#/components/responses/TooManyRequests'
        '500':
          $ref: '../common/responses.yaml#/components/responses/InternalServerError'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate the current session
      operationId: logout
      responses:
        '200':
          description: Logout successful
        '401':
          $ref: '../common/responses.yaml#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: Use a refresh token to obtain a new access token
      operationId: authRefreshToken
      security: []  # Uses refresh token in body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        '401':
          $ref: '../common/responses.yaml#/components/responses/Unauthorized'
        '500':
          $ref: '../common/responses.yaml#/components/responses/InternalServerError'

  /auth/edge-mcp:
    post:
      tags:
        - Authentication
      summary: Authenticate Edge MCP
      description: Authenticate an Edge MCP instance
      operationId: authenticateEdgeMCP
      security: []  # Uses API key in body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EdgeMCPAuthRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EdgeMCPAuthResponse'
        '401':
          $ref: '../common/responses.yaml#/components/responses/Unauthorized'
        '500':
          $ref: '../common/responses.yaml#/components/responses/InternalServerError'

  /auth/password/reset:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Request a password reset email
      operationId: requestPasswordReset
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '200':
          description: Password reset email sent if account exists
        '400':
          $ref: '../common/responses.yaml#/components/responses/BadRequest'

  /auth/password/reset/confirm:
    post:
      tags:
        - Authentication
      summary: Confirm password reset
      description: Reset password using token from email
      operationId: confirmPasswordReset
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
      responses:
        '200':
          description: Password reset successful
        '400':
          $ref: '../common/responses.yaml#/components/responses/BadRequest'
        '404':
          description: Invalid or expired token

  /auth/email/verify:
    post:
      tags:
        - Authentication
      summary: Verify email
      description: Verify email address using token
      operationId: verifyEmail
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailVerificationRequest'
      responses:
        '200':
          description: Email verified successfully
        '400':
          $ref: '../common/responses.yaml#/components/responses/BadRequest'
        '404':
          description: Invalid or expired token

  /auth/email/resend:
    post:
      tags:
        - Authentication
      summary: Resend verification email
      description: Resend email verification link
      operationId: resendVerificationEmail
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationRequest'
      responses:
        '200':
          description: Verification email sent if account exists
        '400':
          $ref: '../common/responses.yaml#/components/responses/BadRequest'

  /auth/invitation/{token}:
    get:
      tags:
        - Authentication
      summary: Get invitation details
      description: Get details about an invitation
      operationId: getInvitationDetails
      security: []
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Invitation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationDetails'
        '404':
          description: Invalid or expired invitation

  /auth/invitation/accept:
    post:
      tags:
        - Authentication
      summary: Accept invitation
      description: Accept an invitation to join an organization
      operationId: acceptInvitation
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptInvitationRequest'
      responses:
        '200':
          description: Invitation accepted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '../common/responses.yaml#/components/responses/BadRequest'
        '404':
          description: Invalid or expired invitation

  # Protected User Management Endpoints (authentication required)
  
  /users/invite:
    post:
      tags:
        - Authentication
      summary: Invite user
      description: Invite a user to join the organization (admin only)
      operationId: inviteUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteUserRequest'
      responses:
        '201':
          description: Invitation sent successfully
        '400':
          $ref: '../common/responses.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../common/responses.yaml#/components/responses/Unauthorized'
        '403':
          description: Insufficient permissions

  /users:
    get:
      tags:
        - Authentication
      summary: List organization users
      description: List all users in the organization
      operationId: listOrganizationUsers
      responses:
        '200':
          description: User list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          $ref: '../common/responses.yaml#/components/responses/Unauthorized'

  /users/{id}/role:
    put:
      tags:
        - Authentication
      summary: Update user role
      description: Update a user's role (admin only)
      operationId: updateUserRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
      responses:
        '200':
          description: Role updated successfully
        '400':
          $ref: '../common/responses.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../common/responses.yaml#/components/responses/Unauthorized'
        '403':
          description: Insufficient permissions
        '404':
          description: User not found

  /users/{id}:
    delete:
      tags:
        - Authentication
      summary: Remove user
      description: Remove a user from the organization (admin only)
      operationId: removeUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User removed successfully
        '401':
          $ref: '../common/responses.yaml#/components/responses/Unauthorized'
        '403':
          description: Insufficient permissions
        '404':
          description: User not found

  # Organization Management Endpoints
  
  /organization:
    get:
      tags:
        - Authentication
      summary: Get organization
      description: Get current organization details
      operationId: getOrganization
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '401':
          $ref: '../common/responses.yaml#/components/responses/Unauthorized'
    
    put:
      tags:
        - Authentication
      summary: Update organization
      description: Update organization settings (admin only)
      operationId: updateOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          $ref: '../common/responses.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../common/responses.yaml#/components/responses/Unauthorized'
        '403':
          description: Insufficient permissions

  /organization/usage:
    get:
      tags:
        - Authentication
      summary: Get organization usage
      description: Get organization usage statistics
      operationId: getOrganizationUsage
      responses:
        '200':
          description: Usage statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationUsage'
        '401':
          $ref: '../common/responses.yaml#/components/responses/Unauthorized'

  # User Profile Endpoints
  
  /profile:
    get:
      tags:
        - Authentication
      summary: Get profile
      description: Get current user profile
      operationId: getProfile
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '../common/responses.yaml#/components/responses/Unauthorized'
    
    put:
      tags:
        - Authentication
      summary: Update profile
      description: Update current user profile
      operationId: updateProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '../common/responses.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../common/responses.yaml#/components/responses/Unauthorized'

  /profile/password:
    post:
      tags:
        - Authentication
      summary: Change password
      description: Change current user password
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
        '400':
          $ref: '../common/responses.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../common/responses.yaml#/components/responses/Unauthorized'

components:
  schemas:
    OrganizationRegistration:
      type: object
      required:
        - organization_name
        - admin_email
        - admin_password
        - admin_full_name
      properties:
        organization_name:
          type: string
          minLength: 3
          maxLength: 100
        admin_email:
          type: string
          format: email
        admin_password:
          type: string
          minLength: 8
        admin_full_name:
          type: string
        isolation_mode:
          type: string
          enum: [strict, relaxed, open]
          default: strict

    RegistrationResponse:
      type: object
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
        user:
          $ref: '#/components/schemas/UserProfile'
        api_key:
          type: string
        access_token:
          type: string
        refresh_token:
          type: string

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: integer
        user:
          $ref: '#/components/schemas/UserProfile'

    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string

    RefreshResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: integer

    EdgeMCPAuthRequest:
      type: object
      required:
        - edge_mcp_id
        - api_key
      properties:
        edge_mcp_id:
          type: string
        api_key:
          type: string

    EdgeMCPAuthResponse:
      type: object
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
        tenant_id:
          type: string
          format: uuid

    PasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    PasswordResetConfirm:
      type: object
      required:
        - token
        - new_password
      properties:
        token:
          type: string
        new_password:
          type: string
          minLength: 8

    EmailVerificationRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string

    ResendVerificationRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    InvitationDetails:
      type: object
      properties:
        organization_name:
          type: string
        inviter_name:
          type: string
        role:
          type: string
        expires_at:
          type: string
          format: date-time

    AcceptInvitationRequest:
      type: object
      required:
        - token
        - password
        - full_name
      properties:
        token:
          type: string
        password:
          type: string
          minLength: 8
        full_name:
          type: string

    InviteUserRequest:
      type: object
      required:
        - email
        - role
      properties:
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, user, viewer]
        full_name:
          type: string

    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserProfile'
        total:
          type: integer

    UpdateRoleRequest:
      type: object
      required:
        - role
      properties:
        role:
          type: string
          enum: [admin, user, viewer]

    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        isolation_mode:
          type: string
          enum: [strict, relaxed, open]
        settings:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UpdateOrganizationRequest:
      type: object
      properties:
        name:
          type: string
        isolation_mode:
          type: string
          enum: [strict, relaxed, open]
        settings:
          type: object

    OrganizationUsage:
      type: object
      properties:
        users:
          type: integer
        agents:
          type: integer
        tools:
          type: integer
        api_calls_today:
          type: integer
        api_calls_month:
          type: integer
        storage_bytes:
          type: integer

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        full_name:
          type: string
        role:
          type: string
        organization_id:
          type: string
          format: uuid
        email_verified:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UpdateProfileRequest:
      type: object
      properties:
        full_name:
          type: string
        email:
          type: string
          format: email

    ChangePasswordRequest:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
        new_password:
          type: string
          minLength: 8