version: '3.8'

# Production Docker Compose using published images from GitHub Container Registry
# Replace {github-username} with your actual GitHub username

services:
  database:
    image: pgvector/pgvector:pg17
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATABASE_USER:-mcp}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME:-devops_mcp}
      POSTGRES_INITDB_ARGS: "-c shared_preload_libraries='vector'"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-mcp}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  edge-mcp:
    # Replace {github-username} with your GitHub username
    image: ghcr.io/{github-username}/developer-mesh-edge-mcp:${VERSION:-latest}
    restart: unless-stopped
    ports:
      - "${EDGE_MCP_PORT:-8085}:8085"
    environment:
      MCP_CONFIG_FILE: /app/configs/config.docker.yaml
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_USER: ${DATABASE_USER:-mcp}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME:-devops_mcp}
      DATABASE_SSL_MODE: ${DATABASE_SSL_MODE:-disable}
      REDIS_ADDR: redis:6379
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_API_KEY: ${ADMIN_API_KEY}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITHUB_APP_ID: ${GITHUB_APP_ID}
      GITHUB_APP_PRIVATE_KEY: ${GITHUB_APP_PRIVATE_KEY}
      GITHUB_WEBHOOK_SECRET: ${GITHUB_WEBHOOK_SECRET}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_ENDPOINT: ${S3_ENDPOINT}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8085/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network

  rest-api:
    # Replace {github-username} with your GitHub username
    image: ghcr.io/{github-username}/developer-mesh-rest-api:${VERSION:-latest}
    restart: unless-stopped
    ports:
      - "${REST_API_PORT:-8081}:8081"
    environment:
      API_CONFIG_FILE: /app/configs/config.docker.yaml
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_USER: ${DATABASE_USER:-mcp}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME:-devops_mcp}
      DATABASE_SSL_MODE: ${DATABASE_SSL_MODE:-disable}
      REDIS_ADDR: redis:6379
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_API_KEY: ${ADMIN_API_KEY}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - mcp-network

  worker:
    # Replace {github-username} with your GitHub username
    image: ghcr.io/{github-username}/developer-mesh-worker:${VERSION:-latest}
    restart: unless-stopped
    environment:
      WORKER_CONFIG_FILE: /app/configs/config.docker.yaml
      DATABASE_HOST: database
      DATABASE_PORT: 5432
      DATABASE_USER: ${DATABASE_USER:-mcp}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME:-devops_mcp}
      DATABASE_SSL_MODE: ${DATABASE_SSL_MODE:-disable}
      REDIS_ADDR: redis:6379
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      SQS_QUEUE_URL: ${SQS_QUEUE_URL}
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mcp-network

  # Optional: Include monitoring stack
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
    networks:
      - mcp-network

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - mcp-network

networks:
  mcp-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: